{"ast":null,"code":"var _s = $RefreshSig$();\n\n//React Imports\nimport { useState, useEffect } from \"react\"; //Firebase Auth Object\n\nimport { auth, storage, db } from \"../firebase/config\"; //Context\n\nimport { useAuthContext } from './useAuthContext';\nexport const useSignUp = () => {\n  _s();\n\n  const [isUnmounted, setIsUnmounted] = useState(false);\n  const [error, setError] = useState(null);\n  const [isPending, setIsPending] = useState(false); //context\n\n  const {\n    dispatch\n  } = useAuthContext();\n\n  const signUp = async (email, password, displayName, displayPicture) => {\n    setIsUnmounted(false);\n    setError(null);\n    setIsPending(true);\n\n    try {\n      //Sign up the user\n      const response = await auth.createUserWithEmailAndPassword(email, password);\n\n      if (!response) {\n        throw new Error('We Could not complete your Sign Up. Please Try Again after some time!');\n      } //Upload the profile pic of the user to Firebase storage\n\n\n      const imagePath = `thumbnails/${response.user.uid}/${displayPicture.name}`; //Put the profile picture into the image path we created\n\n      const image = await storage.ref(imagePath).put(displayPicture); //Get the image url from the storage\n\n      const imageURL = await image.ref.getDownloadURL(); //Add user's displayname\n\n      await response.user.updateProfile({\n        displayName,\n        photoURL: imageURL\n      }); //Store the user details in users collection as a document. \n      //Instead of add() method that will create a document with auto generated id, we want the document id to be the same as the user id for which we are creating this document. So, that is why we used .doc() method because it will accept an id to refer to a document. If that document is not present in the collection, it will create that. Exactly what we want.\n      //Finally, on that document, we set some fields and so we use the set() method that will create new fields if they are not already in that document. \n\n      await db.collection('users').doc(response.user.uid).set({\n        online: true,\n        displayName,\n        photoURL: imageURL\n      }); //Dispatch Login action\n\n      dispatch({\n        type: 'LOGIN',\n        payload: response.user\n      });\n\n      if (!isUnmounted) {\n        setIsPending(false);\n        setError(null);\n      }\n    } catch (error) {\n      //if sign up fails with some error then this code runs\n      console.log(error.message);\n\n      if (!isUnmounted) {\n        setError(error.message);\n        setIsPending(false);\n      }\n    }\n  }; //For Cleanup we do this\n\n\n  useEffect(() => {\n    return () => {\n      console.log(\"Unmounted\");\n      setIsUnmounted(true);\n    };\n  }, []);\n  return {\n    signUp,\n    error,\n    isPending\n  };\n};\n\n_s(useSignUp, \"CLgbQziyDS8UeKeWD9wKNuU46oE=\", false, function () {\n  return [useAuthContext];\n});","map":{"version":3,"sources":["/Users/owner/Documents/PM-Source/src/hooks/useSignUp.js"],"names":["useState","useEffect","auth","storage","db","useAuthContext","useSignUp","isUnmounted","setIsUnmounted","error","setError","isPending","setIsPending","dispatch","signUp","email","password","displayName","displayPicture","response","createUserWithEmailAndPassword","Error","imagePath","user","uid","name","image","ref","put","imageURL","getDownloadURL","updateProfile","photoURL","collection","doc","set","online","type","payload","console","log","message"],"mappings":"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","sourcesContent":["//React Imports\nimport { useState, useEffect} from \"react\";\n\n//Firebase Auth Object\nimport { auth, storage, db } from \"../firebase/config\"\n\n//Context\nimport {useAuthContext} from './useAuthContext';\n\nexport const useSignUp = () => {\n\n    const [isUnmounted, setIsUnmounted] = useState(false);\n    const [error, setError] =  useState(null);\n    const [isPending, setIsPending] =  useState(false);\n\n      \n    //context\n    const {dispatch} = useAuthContext();\n    const signUp = async (email, password, displayName, displayPicture) => {\n        setIsUnmounted(false);\n        setError(null);\n        setIsPending(true);\n        try {\n            //Sign up the user\n            const response = await auth.createUserWithEmailAndPassword(email, password);\n\n            if(!response){\n                throw new Error('We Could not complete your Sign Up. Please Try Again after some time!');\n            }\n\n            //Upload the profile pic of the user to Firebase storage\n            const imagePath =  `thumbnails/${response.user.uid}/${displayPicture.name}`;\n\n            //Put the profile picture into the image path we created\n            const image = await storage.ref(imagePath).put(displayPicture);\n\n            //Get the image url from the storage\n            const imageURL = await image.ref.getDownloadURL();\n\n            //Add user's displayname\n            await response.user.updateProfile({displayName, photoURL : imageURL});\n\n            //Store the user details in users collection as a document. \n            \n            //Instead of add() method that will create a document with auto generated id, we want the document id to be the same as the user id for which we are creating this document. So, that is why we used .doc() method because it will accept an id to refer to a document. If that document is not present in the collection, it will create that. Exactly what we want.\n\n            //Finally, on that document, we set some fields and so we use the set() method that will create new fields if they are not already in that document. \n            await db.collection('users')\n                    .doc(response.user.uid)\n                    .set({\n                        online: true,\n                        displayName,\n                        photoURL: imageURL\n                    })\n\n            //Dispatch Login action\n            dispatch({type: 'LOGIN', payload: response.user});\n            if(!isUnmounted) {\n                setIsPending(false);\n                setError(null);\n            }\n            \n\n        } catch(error) {\n            //if sign up fails with some error then this code runs\n            console.log(error.message);\n            if(!isUnmounted) {\n                setError(error.message);\n                setIsPending(false);\n            }\n        }\n    }\n\n\n    //For Cleanup we do this\n    useEffect(() => {\n        return () => {\n            console.log(\"Unmounted\");\n            setIsUnmounted(true);\n        }\n    }, [])\n\n    return {signUp, error, isPending};\n    \n}\n"]},"metadata":{},"sourceType":"module"}