{"ast":null,"code":"var _s = $RefreshSig$();\n\n//React Imports\nimport { useEffect, useState, useRef } from 'react'; //Firestore db object\n\nimport { db } from \"../firebase/config\";\nexport const useCollection = (collectionName, _query, _orderBy) => {\n  _s();\n\n  const [documents, setDocuments] = useState(null);\n  const [error, setError] = useState(null);\n  const [isPending, setIsPending] = useState(false); //To avoid an infinite loop of useEffect because _query is passed as an array which is a reference type. \n\n  const query = useRef(_query).current;\n  const orderBy = useRef(_orderBy).current;\n  useEffect(() => {\n    setIsPending(true);\n    let collectionReference = db.collection(collectionName);\n\n    if (query) {\n      collectionReference = collectionReference.where(...query);\n    }\n\n    if (orderBy) {\n      collectionReference = collectionReference.orderBy(...orderBy);\n    }\n\n    const unsub = collectionReference.onSnapshot(snapshot => {\n      let docArray = [];\n      snapshot.docs.forEach(doc => {\n        docArray.push({ ...doc.data(),\n          id: doc.id\n        });\n      });\n      setIsPending(false);\n      setDocuments(docArray);\n      setError(null);\n    }, error => {\n      setIsPending(false);\n      console.log(error);\n      setError(\"Could not fetch the data!\");\n    }); //Cleanup\n\n    return () => {\n      unsub();\n    };\n  }, [collectionName, query, orderBy]);\n  return {\n    documents,\n    error,\n    isPending\n  };\n};\n\n_s(useCollection, \"jZx1sE9YyXSgaO/9i/x/rUzQDvQ=\");","map":{"version":3,"sources":["/Users/owner/Documents/PM-Source/src/hooks/useCollection.js"],"names":["useEffect","useState","useRef","db","useCollection","collectionName","_query","_orderBy","documents","setDocuments","error","setError","isPending","setIsPending","query","current","orderBy","collectionReference","collection","where","unsub","onSnapshot","snapshot","docArray","docs","forEach","doc","push","data","id","console","log"],"mappings":";;AAAA;AACA,SAAQA,SAAR,EAAmBC,QAAnB,EAA6BC,MAA7B,QAA0C,OAA1C,C,CAEA;;AACA,SAASC,EAAT,QAAmB,oBAAnB;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACC,cAAD,EAAiBC,MAAjB,EAAyBC,QAAzB,KAAsC;AAAA;;AAE/D,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C,CAJ+D,CAM/D;;AACA,QAAMa,KAAK,GAAGZ,MAAM,CAACI,MAAD,CAAN,CAAeS,OAA7B;AACA,QAAMC,OAAO,GAAGd,MAAM,CAACK,QAAD,CAAN,CAAiBQ,OAAjC;AACAf,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,QAAII,mBAAmB,GAAGd,EAAE,CAACe,UAAH,CAAcb,cAAd,CAA1B;;AACA,QAAGS,KAAH,EAAS;AACLG,MAAAA,mBAAmB,GAAGA,mBAAmB,CAACE,KAApB,CAA0B,GAAGL,KAA7B,CAAtB;AACH;;AAED,QAAGE,OAAH,EAAW;AACPC,MAAAA,mBAAmB,GAAGA,mBAAmB,CAACD,OAApB,CAA4B,GAAGA,OAA/B,CAAtB;AACH;;AACD,UAAMI,KAAK,GAAGH,mBAAmB,CAACI,UAApB,CAA+BC,QAAQ,IAAI;AACrD,UAAIC,QAAQ,GAAG,EAAf;AACAD,MAAAA,QAAQ,CAACE,IAAT,CAAcC,OAAd,CAAsBC,GAAG,IAAI;AACzBH,QAAAA,QAAQ,CAACI,IAAT,CAAc,EAAC,GAAGD,GAAG,CAACE,IAAJ,EAAJ;AAAgBC,UAAAA,EAAE,EAAEH,GAAG,CAACG;AAAxB,SAAd;AACH,OAFD;AAGAhB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAJ,MAAAA,YAAY,CAACc,QAAD,CAAZ;AACAZ,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,KARa,EAQXD,KAAK,IAAI;AACRG,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAiB,MAAAA,OAAO,CAACC,GAAR,CAAYrB,KAAZ;AACAC,MAAAA,QAAQ,CAAC,2BAAD,CAAR;AACH,KAZa,CAAd,CAVY,CAyBZ;;AACA,WAAO,MAAM;AACTS,MAAAA,KAAK;AACR,KAFD;AAGH,GA7BQ,EA6BN,CAACf,cAAD,EAAiBS,KAAjB,EAAwBE,OAAxB,CA7BM,CAAT;AA+BA,SAAO;AAACR,IAAAA,SAAD;AAAYE,IAAAA,KAAZ;AAAmBE,IAAAA;AAAnB,GAAP;AACH,CAzCM;;GAAMR,a","sourcesContent":["//React Imports\nimport {useEffect, useState, useRef} from 'react';\n\n//Firestore db object\nimport { db } from \"../firebase/config\"\n\nexport const useCollection = (collectionName, _query, _orderBy) => {\n\n    const [documents, setDocuments] = useState(null);\n    const [error, setError] = useState(null);\n    const [isPending, setIsPending] = useState(false);\n\n    //To avoid an infinite loop of useEffect because _query is passed as an array which is a reference type. \n    const query = useRef(_query).current;  \n    const orderBy = useRef(_orderBy).current;    \n    useEffect(() => {\n        setIsPending(true);\n        let collectionReference = db.collection(collectionName);\n        if(query){\n            collectionReference = collectionReference.where(...query);\n        }\n\n        if(orderBy){\n            collectionReference = collectionReference.orderBy(...orderBy);\n        }\n        const unsub = collectionReference.onSnapshot(snapshot => {\n            let docArray = [];\n            snapshot.docs.forEach(doc => {\n                docArray.push({...doc.data(), id: doc.id});\n            })\n            setIsPending(false);\n            setDocuments(docArray);\n            setError(null);\n        }, error => {\n            setIsPending(false);\n            console.log(error);\n            setError(\"Could not fetch the data!\");\n        })\n\n\n        //Cleanup\n        return () => {\n            unsub();\n        }\n    }, [collectionName, query, orderBy])\n\n    return {documents, error, isPending}\n}\n"]},"metadata":{},"sourceType":"module"}