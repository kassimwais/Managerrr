{"ast":null,"code":"var _s = $RefreshSig$();\n\n//React Imports\nimport { useState, useEffect } from \"react\"; //Firebase Auth Object\n\nimport { auth, db } from \"../firebase/config\"; //Context Hook\n\nimport { useAuthContext } from \"./useAuthContext\";\nexport const useLogOut = () => {\n  _s();\n\n  const [isUnmounted, setIsUnmounted] = useState(false);\n  const [error, setError] = useState(null);\n  const [isPending, setIsPending] = useState(false);\n  const {\n    dispatch,\n    user\n  } = useAuthContext();\n\n  const logout = async () => {\n    setError(null);\n    setIsPending(true); //Logout the user\n\n    try {\n      //Set online to false in users collection\n      //We cannot do it after we hae signed user out because in that case no user has logged in and hence our firestore rules will not allow that. \n      await db.collection('users').doc(user.uid).update({\n        online: false\n      });\n      await auth.signOut(); //Dispatch Logout action (No Payload means all we want is the user to be null in our AuthContext)\n\n      dispatch({\n        type: 'LOGOUT'\n      }); //Update states\n\n      if (!isUnmounted) {\n        setIsPending(false);\n        setError(null);\n      }\n    } catch (error) {\n      if (!isUnmounted) {\n        console.log(error.message);\n        setError(error.message);\n        setIsPending(false);\n      }\n    }\n  }; //For Cleanup we do this\n\n\n  useEffect(() => {\n    return () => {\n      setIsUnmounted(true);\n    };\n  }, []);\n  return {\n    logout,\n    error,\n    isPending\n  };\n};\n\n_s(useLogOut, \"6ARUaVZ/LFCHdDsjx8Fj3uGVc9E=\", false, function () {\n  return [useAuthContext];\n});","map":{"version":3,"sources":["/Users/owner/Documents/PM-Source/src/hooks/useLogOut.js"],"names":["useState","useEffect","auth","db","useAuthContext","useLogOut","isUnmounted","setIsUnmounted","error","setError","isPending","setIsPending","dispatch","user","logout","collection","doc","uid","update","online","signOut","type","console","log","message"],"mappings":";;AAAA;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;;AAEA,SAASC,IAAT,EAAeC,EAAf,QAAyB,oBAAzB,C,CAEA;;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAM;AAACY,IAAAA,QAAD;AAAWC,IAAAA;AAAX,MAAmBT,cAAc,EAAvC;;AAEA,QAAMU,MAAM,GAAG,YAAY;AACvBL,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ,CAFuB,CAIvB;;AACA,QAAI;AAEA;AACA;AAEA,YAAMR,EAAE,CAACY,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BH,IAAI,CAACI,GAAhC,EAAqCC,MAArC,CAA4C;AAC9CC,QAAAA,MAAM,EAAE;AADsC,OAA5C,CAAN;AAIA,YAAMjB,IAAI,CAACkB,OAAL,EAAN,CATA,CAWA;;AACAR,MAAAA,QAAQ,CAAC;AAACS,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAR,CAZA,CAcA;;AACA,UAAG,CAACf,WAAJ,EAAgB;AACZK,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;AAEJ,KApBD,CAoBE,OAAMD,KAAN,EAAY;AACV,UAAG,CAACF,WAAJ,EAAgB;AAChBgB,QAAAA,OAAO,CAACC,GAAR,CAAYf,KAAK,CAACgB,OAAlB;AACAf,QAAAA,QAAQ,CAACD,KAAK,CAACgB,OAAP,CAAR;AACAb,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACC;AACR;AACJ,GAhCG,CAP2B,CAyC3B;;;AACAV,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAO,MAAM;AACTM,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH,KAFD;AAGH,GAJQ,EAIN,EAJM,CAAT;AAMA,SAAO;AAACO,IAAAA,MAAD;AAASN,IAAAA,KAAT;AAAgBE,IAAAA;AAAhB,GAAP;AAEH,CAlDM;;GAAML,S;UAKgBD,c","sourcesContent":["//React Imports\nimport { useState, useEffect } from \"react\"\n\n//Firebase Auth Object\n\nimport { auth, db } from \"../firebase/config\"\n\n//Context Hook\nimport { useAuthContext } from \"./useAuthContext\"\n\nexport const useLogOut = () => {\n    const [isUnmounted, setIsUnmounted] = useState(false);\n    const [error, setError] = useState(null);\n    const [isPending, setIsPending] = useState(false);\n\n    const {dispatch, user} = useAuthContext();\n\n    const logout = async () => {\n        setError(null);\n        setIsPending(true);\n\n        //Logout the user\n        try {\n\n            //Set online to false in users collection\n            //We cannot do it after we hae signed user out because in that case no user has logged in and hence our firestore rules will not allow that. \n\n            await db.collection('users').doc(user.uid).update({\n                online: false\n            })\n\n            await auth.signOut();\n\n            //Dispatch Logout action (No Payload means all we want is the user to be null in our AuthContext)\n            dispatch({type: 'LOGOUT'});\n\n            //Update states\n            if(!isUnmounted){\n                setIsPending(false);\n                setError(null);\n            }\n           \n        } catch(error){\n            if(!isUnmounted){\n            console.log(error.message);\n            setError(error.message);\n            setIsPending(false);\n            }\n    }\n}\n\n    //For Cleanup we do this\n    useEffect(() => {\n        return () => {\n            setIsUnmounted(true);\n        }\n    }, [])\n\n    return {logout, error, isPending};\n\n}\n"]},"metadata":{},"sourceType":"module"}