{"ast":null,"code":"var _s = $RefreshSig$();\n\n//React Imports\nimport { useEffect, useState } from \"react\"; //Firebase Authentication Object\n\nimport { auth, db } from '../firebase/config'; //useAuthContext hook\n\nimport { useAuthContext } from './useAuthContext';\nexport const useLogin = () => {\n  _s();\n\n  const [isUnmounted, setIsUnmounted] = useState(null);\n  const [error, setError] = useState(null);\n  const [isPending, setIsPending] = useState(false);\n  const {\n    dispatch\n  } = useAuthContext();\n\n  const login = async (email, password) => {\n    setIsUnmounted(false);\n    setError(null);\n    setIsPending(true);\n\n    try {\n      const response = await auth.signInWithEmailAndPassword(email, password);\n\n      if (!response) {\n        throw new Error(\"Couldn't log in. Please try again!\");\n      } // Set online to true for this user\n\n\n      await db.collection('users').doc(response.user.uid).update({\n        online: true\n      });\n      dispatch({\n        type: 'LOGIN',\n        payload: response.user\n      });\n\n      if (!isUnmounted) {\n        setIsPending(false);\n        setError(null);\n      }\n    } catch (error) {\n      console.log(error.message);\n\n      if (!isUnmounted) {\n        setError(error.message);\n        setIsPending(false);\n      }\n    }\n  }; //For Cleanup\n\n\n  useEffect(() => {\n    return () => {\n      setIsUnmounted(true);\n    };\n  }, []);\n  return {\n    login,\n    error,\n    isPending\n  };\n};\n\n_s(useLogin, \"Vat1OsMDgM1vuzcnVkd0GDvgFKc=\", false, function () {\n  return [useAuthContext];\n});","map":{"version":3,"sources":["/Users/owner/Documents/PM-Source/src/hooks/useLogin.js"],"names":["useEffect","useState","auth","db","useAuthContext","useLogin","isUnmounted","setIsUnmounted","error","setError","isPending","setIsPending","dispatch","login","email","password","response","signInWithEmailAndPassword","Error","collection","doc","user","uid","update","online","type","payload","console","log","message"],"mappings":";;AAAA;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC,C,CAEA;;AACA,SAAQC,IAAR,EAAcC,EAAd,QAAuB,oBAAvB,C,CAEA;;AACA,SAAQC,cAAR,QAA6B,kBAA7B;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAE1B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAM;AAACW,IAAAA;AAAD,MAAaR,cAAc,EAAjC;;AAEA,QAAMS,KAAK,GAAG,OAAOC,KAAP,EAAcC,QAAd,KAA2B;AACrCR,IAAAA,cAAc,CAAC,KAAD,CAAd;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,QAAI;AACA,YAAMK,QAAQ,GAAG,MAAMd,IAAI,CAACe,0BAAL,CAAgCH,KAAhC,EAAuCC,QAAvC,CAAvB;;AACA,UAAG,CAACC,QAAJ,EAAc;AACV,cAAM,IAAIE,KAAJ,CAAU,oCAAV,CAAN;AACH,OAJD,CAMA;;;AACA,YAAMf,EAAE,CAACgB,UAAH,CAAc,OAAd,EACGC,GADH,CACOJ,QAAQ,CAACK,IAAT,CAAcC,GADrB,EAEGC,MAFH,CAEU;AACJC,QAAAA,MAAM,EAAE;AADJ,OAFV,CAAN;AAMAZ,MAAAA,QAAQ,CAAC;AAACa,QAAAA,IAAI,EAAE,OAAP;AAAgBC,QAAAA,OAAO,EAAEV,QAAQ,CAACK;AAAlC,OAAD,CAAR;;AAEA,UAAG,CAACf,WAAJ,EAAgB;AAChBK,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACC;AAEJ,KApBD,CAoBC,OAAOD,KAAP,EAAa;AACVmB,MAAAA,OAAO,CAACC,GAAR,CAAYpB,KAAK,CAACqB,OAAlB;;AACA,UAAG,CAACvB,WAAJ,EAAgB;AACZG,QAAAA,QAAQ,CAACD,KAAK,CAACqB,OAAP,CAAR;AACAlB,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AAEJ;AACJ,GAhCD,CAR0B,CA2C1B;;;AACAX,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAO,MAAM;AACTO,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH,KAFD;AAGH,GAJQ,EAIP,EAJO,CAAT;AAOA,SAAO;AAACM,IAAAA,KAAD;AAAQL,IAAAA,KAAR;AAAeE,IAAAA;AAAf,GAAP;AACH,CApDM;;GAAML,Q;UAMUD,c","sourcesContent":["//React Imports\nimport { useEffect, useState } from \"react\"\n\n//Firebase Authentication Object\nimport {auth, db} from '../firebase/config';\n\n//useAuthContext hook\nimport {useAuthContext} from './useAuthContext';\n\nexport const useLogin = () => {\n\n    const [isUnmounted, setIsUnmounted] = useState(null);\n    const [error, setError] = useState(null);\n    const [isPending, setIsPending] = useState(false);\n\n    const {dispatch} = useAuthContext();\n\n    const login = async (email, password) => {\n        setIsUnmounted(false);\n        setError(null);\n        setIsPending(true);\n        try {\n            const response = await auth.signInWithEmailAndPassword(email, password);\n            if(!response) {\n                throw new Error(\"Couldn't log in. Please try again!\")\n            }\n\n            // Set online to true for this user\n            await db.collection('users')\n                    .doc(response.user.uid)\n                    .update({\n                        online: true\n                    })\n\n            dispatch({type: 'LOGIN', payload: response.user});\n\n            if(!isUnmounted){\n            setIsPending(false);    \n            setError(null);\n            }\n            \n        }catch (error){\n            console.log(error.message);\n            if(!isUnmounted){\n                setError(error.message);\n                setIsPending(false);\n            }\n           \n        }\n    }\n\n\n    //For Cleanup\n    useEffect(() => {\n        return () => {\n            setIsUnmounted(true);\n        }\n    },[])\n\n\n    return {login, error, isPending};\n}\n"]},"metadata":{},"sourceType":"module"}